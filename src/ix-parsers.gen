# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
REST=''
parse_main() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-h'|'--help')
				usage_main
				exit 0 ;;
			'-v'|'--version')
				echo "${VERSION}"
				exit 0 ;;
			--)
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				case $1 in 'fzf'|'list'|'get'|'delete'|'paste'|'replace'|'edit') ;;
					*) set "notcmd" "$1"; break
				esac
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_main() {
cat<<'GETOPTIONSHERE'
Usage: ix [OPTION] [COMMAND]

ix.io client

Options:
  -h, --help                  display this help and exit
  -v, --version               output version information and quit

Commands:
  fzf       start fzf interface
  list      list pastes
  get       get ID
  delete    delete ID
  paste     paste [FILE] ... If no FILEs then paste stdin
  replace   replace ID with stdin
  edit      edit ID
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
NETRC=''
REST=''
parse_fzf() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[N]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_fzf
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_fzf() {
cat<<'GETOPTIONSHERE'
Usage: ix fzf [OPTION]

Start fzf interface to ix.io

Options:
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
ANON=''
WHO=''
NETRC=''
REST=''
parse_list() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[uN]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[ah]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-a'|'--anon')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				ANON="$OPTARG"
				;;
			'-u'|'--user')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				WHO="$OPTARG"
				shift ;;
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_list
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_list() {
cat<<'GETOPTIONSHERE'
Usage: ix list [OPTION]

List pastes. Default is to list pastes for the user specified in .netrc

Options:
  -a, --anon                  list anonymous pastes
  -u, --user WHO              list WHO's pastes
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
REST=''
parse_get() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-h'|'--help')
				usage_get
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_get() {
cat<<'GETOPTIONSHERE'
Usage: ix get [ID] ...

Dump pastes for each ID to stdout

Options:
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
NETRC=''
REST=''
parse_delete() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[N]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_delete
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_delete() {
cat<<'GETOPTIONSHERE'
Usage: ix delete [OPTION] [ID] ...

Deleete pastes for each ID

Options:
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
ANON=''
NETRC=''
REST=''
parse_paste() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[N]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[ah]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-a'|'--anon')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				ANON="$OPTARG"
				;;
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_paste
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_paste() {
cat<<'GETOPTIONSHERE'
Usage: ix paste [OPTION] [FILE] ...

Paste stdin or each FILE. Appending ':<filetype>' to FILE sets its filetype

Options:
  -a, --anon                  paste anonymously
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
NETRC=''
REST=''
parse_replace() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[N]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_replace
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_replace() {
cat<<'GETOPTIONSHERE'
Usage: ix replace [OPTION] [ID]

Replace paste ID with the contents of stdin

Options:
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
NETRC=''
REST=''
parse_edit() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[N]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'-N'|'--netrc')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				NETRC="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage_edit
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage_edit() {
cat<<'GETOPTIONSHERE'
Usage: ix edit [OPTION]

Edit paste ID

Options:
  -N, --netrc NETRC           path to netrc file (default: /home/jbrubake/.netrc)
  -h, --help                  display this help and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
